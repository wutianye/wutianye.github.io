<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>mysql</title>
    <link href="/2020/10/06/mysql/"/>
    <url>/2020/10/06/mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL那些事儿"><a href="#MySQL那些事儿" class="headerlink" title="MySQL那些事儿"></a>MySQL那些事儿</h1><h2 id="前言：关系型数据库与非关系型数据库"><a href="#前言：关系型数据库与非关系型数据库" class="headerlink" title="前言：关系型数据库与非关系型数据库"></a>前言：关系型数据库与非关系型数据库</h2><p>关系型： mysql oracle</p><p>非关系型： Redis mongodb</p><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p>是指采用了关系模型来组织数据的数据库。</p><h4 id="关系型数据库的优点："><a href="#关系型数据库的优点：" class="headerlink" title="关系型数据库的优点："></a>关系型数据库的优点：</h4><p>  容易理解：二维表结构是非常贴近逻辑世界的一个概念</p><p>  使用方便：通用的SQL语言使得操作关系型数据库非常方便</p><p>  易于维护：丰富的完整性(实体完整性、参照完整性和用户定义的完整性)大大减低了数据冗余和数据不一致的概率</p><h4 id="关系型数据库特性"><a href="#关系型数据库特性" class="headerlink" title="关系型数据库特性"></a>关系型数据库特性</h4><p>(1). 事务一致性: 关系型数据库在对事物一致性的维护中有很大的开销，而现在很多web2.0系统对事物的读写一致性都不高<br>(2). 读写实时性: 对关系数据库来说，插入一条数据之后立刻查询，是肯定可以读出这条数据的，但是对于很多web应用来说，并不要求这么高的实时性，比如发一条消息之后，过几秒乃至十几秒之后才看到这条动态是完全可以接受的<br>(3). 复杂SQL，特别是多表关联查询: 任何大数据量的web系统，都非常忌讳多个大表的关联查询，以及复杂的数据分析类型的复杂SQL报表查询，特别是SNS类型的网站（SNS，专指社交网络服务，包括了社交软件和社交网站。），从需求以及产品阶级角度，就避免了这种情况的产生。往往更多的只是单表的主键查询，以及单表的简单条件分页查询，SQL的功能极大的弱化了 </p><p>   在关系型数据库中，导致性能欠佳的最主要原因是多表的关联查询，以及复杂的数据分析类型的复杂SQL报表查询。为了保证数据库的ACID特性，我们必须尽量按照其要求的范式进行设计，关系型数据库中的表都是存储一个格式化的数据结构。每个元组字段的组成都是一样，即使不是每个元组都需要所有的字段，但数据库会为每个元组分配所有的字段，这样的结构可以便于标语表之间进行链接等操作，但从另一个角度来说它也是关系型数据库性能瓶颈的一个因素。</p><h4 id="关系型数据库瓶颈"><a href="#关系型数据库瓶颈" class="headerlink" title="关系型数据库瓶颈"></a>关系型数据库瓶颈</h4><p> (1). 高并发读写需求<br>  网站的用户并发性非常高，往往达到每秒上万次读写请求，对于传统关系型数据库来说，硬盘I/O是一个很大的瓶颈<br> (2). 海量数据的高效率读写<br>  网站每天产生的数据量是巨大的，对于关系型数据库来说，在一张包含海量数据的表中查询，效率是非常低的<br> (3). 缺少高扩展性和可用性</p><h3 id="非关系型数据库（NoSQL）"><a href="#非关系型数据库（NoSQL）" class="headerlink" title="非关系型数据库（NoSQL）"></a>非关系型数据库（NoSQL）</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>非关系型数据库提出另一种理念，例如，以键值对存储，且结构不固定，每一个元组可以有不一样的字段，每个元组可以根据需要增加一些自己的键值对，这样就不会局限于固定的结构，可以减少一些时间和空间的开销。使用这种方式，用户可以根据需要去添加自己需要的字段，这样，为了获取用户的不同信息，不需要像关系型数据库中，要对多表进行关联查询。仅需要根据id取出相应的value就可以完成查询。但非关系型数据库由于很少的约束，他也不能够提供像SQL所提供的where这种对于字段属性值情况的查询。并且难以体现设计的完整性。他只适合存储一些较为简单的数据，对于需要进行较复杂查询的数据，SQL数据库显的更为合适。</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>①面向高性能并发读写的key-value数据库：key-value数据库的主要特点即使具有极高的并发读写性能，Redis,Tokyo Cabinet,Flare就是这类的代表</p><p>②面向文档数据库：这类数据库的特点是，可以在海量的数据中快速的查询数据，典型代表为MongoDB以及CouchDB</p><p>③展性的分布式数据库：这类数据库想解决的问题就是传统数据库存在可扩展性上的缺陷，这类数据库可以适应数据量的增加以及数据结构的变化</p><h3 id="两者比较"><a href="#两者比较" class="headerlink" title="两者比较"></a>两者比较</h3><table><thead><tr><th></th><th><strong>关系型</strong></th><th><strong>非关系型</strong></th></tr></thead><tbody><tr><td><strong>存储方式</strong></td><td>表格</td><td>动态结构（key-value 、文档）</td></tr><tr><td><strong>存储规范</strong></td><td>关系模型 无重复 清晰</td><td>数据集 有重复 读写方便</td></tr><tr><td><strong>扩展方式</strong></td><td>很难</td><td>增加服务器</td></tr><tr><td><strong>查询方式</strong></td><td>SQL</td><td>UNQL</td></tr><tr><td><strong>事务性</strong></td><td>ACID</td><td>BASE</td></tr><tr><td><strong>读写性能</strong></td><td>强调数据一致性，读写差</td><td>读写快</td></tr></tbody></table><p>  关系型数据库的最大特点就是事务的一致性：传统的关系型数据库读写操作都是事务的，具有ACID的特点，这个特性使得关系型数据库可以用于几乎所有对一致性有要求的系统中，如典型的银行系统。但是，在网页应用中，尤其是SNS应用中，一致性却不是显得那么重要，像微博、facebook这类SNS的应用，对并发读写能力要求极高，关系型数据库已经无法应付。因此，必须用新的一种数据结构存储来代替关系数据库。</p><p>  关系数据库的另一个特点就是其具有固定的表结构，因此，其扩展性极差，而在SNS中，系统的升级，功能的增加，往往意味着数据结构巨大变动，这一点关系型数据库也难以应付，需要新的结构化数据存储。</p><p>  于是，非关系型数据库应运而生，由于不可能用一种数据结构化存储应付所有的新的需求，因此，非关系型数据库严格上不是一种数据库，应该是一种数据结构化存储方法的集合。</p><p>  必须强调的是，数据的持久存储，尤其是海量数据的持久存储，还是需要一种关系数据库这员老将。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>关系型数据库特点在于其存储方式清晰严谨，无冗余，具有数据一致性。但不易拓展，并发性差</p><p>非关系型数据库更适合处理高并发和海量数据读写，并且更易拓展。</p><h2 id="正式进入MySQL"><a href="#正式进入MySQL" class="headerlink" title="正式进入MySQL"></a>正式进入MySQL</h2><h3 id="MySQL架构"><a href="#MySQL架构" class="headerlink" title="MySQL架构"></a>MySQL架构</h3><p>MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎的架构上，插件式的存储引擎架构将查询处理和其它的系统任务以及数据的存储提取相分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p><h3 id="层级图"><a href="#层级图" class="headerlink" title="层级图"></a>层级图</h3><p><img src="(/img/mysqljiagoutu.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/10/02/hello-world/"/>
    <url>/2020/10/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
